<!DOCTYPE html>
<html>
<head>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Spring Boot Interview Questions &#8211; Spring Boot Tutorial</title>
    <link rel="dns-prefetch" href="//maxcdn.bootstrapcdn.com">
    <link rel="dns-prefetch" href="//cdn.mathjax.org">
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Let's take a quick look at some of the important Spring Boot concepts with examples to get ready for a Spring Boot Interview. We will understand all the basics of Spring Boot - Auto Configuration, Starter Parent, a variety of Starter Projects - Web, JPA, Data REST and Test.">
    <meta name="robots" content="all">
    <meta name="author" content="Ranga Karanam">
    
    <meta name="keywords" content="Spring, Boot,, Interview, Questions">
    <link rel="canonical" href="http://www.springboottutorial.com/spring-boot-interview-questions">
    <link rel="alternate" type="application/rss+xml" title="RSS Feed for Spring Boot Tutorial" href="/feed.xml" />

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/pixyll.css?201801091313" type="text/css">

    <!-- Fonts -->
    
    <link href='//fonts.googleapis.com/css?family=Merriweather:900,900italic,300,300italic' rel='stylesheet' type='text/css'>
    <link href='//fonts.googleapis.com/css?family=Lato:900,300' rel='stylesheet' type='text/css'>
    
    
      <link href="//maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css" rel="stylesheet">
    

    <!-- MathJax -->
    

    <!-- Verifications -->
    
    

    <!-- Open Graph -->
    <!-- From: https://github.com/mmistakes/hpstr-jekyll-theme/blob/master/_includes/head.html -->
    <meta property="og:locale" content="en_US">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Spring Boot Interview Questions">
    <meta property="og:description" content="Spring Boot Tutorials. Hands-on examples. - Basics of Spring Boot. Covers Spring Boot Starter Projects, Spring Initializr, Creating REST Services, Unit and Integration tests, Profiles, Spring Boot Data JPA, Actuator and Security">
    <meta property="og:url" content="http://www.springboottutorial.com/spring-boot-interview-questions">
    <meta property="og:site_name" content="Spring Boot Tutorial">

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary" />
    
        <meta name="twitter:site" content="@in28Minutes" />
    
    <meta name="twitter:title" content="Spring Boot Interview Questions" />
    <meta name="twitter:description" content="Let's take a quick look at some of the important Spring Boot concepts with examples to get ready for a Spring Boot Interview. We will understand all the basics of Spring Boot - Auto Configuration, Starter Parent, a variety of Starter Projects - Web, JPA, Data REST and Test." />
    <meta name="twitter:url" content="http://www.springboottutorial.com/spring-boot-interview-questions" />

    <!-- Icons -->
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/apple-touch-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/apple-touch-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/apple-touch-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/apple-touch-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon-180x180.png">
    <link rel="icon" type="image/png" href="/favicon-192x192.png" sizes="192x192">
    <link rel="icon" type="image/png" href="/favicon-160x160.png" sizes="160x160">
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96">
    <link rel="icon" type="image/png" href="/favicon-16x16.png" sizes="16x16">
    <link rel="icon" type="image/png" href="/favicon-32x32.png" sizes="32x32">

    
    <script type="text/javascript">
       (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
       (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
       m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
       })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
       ga('create', 'UA-32942307-5', 'auto');
       ga('send', 'pageview');
    </script>
    
</head>

<body class="site">
  
	

  <div class="site-wrap">
    <header class="site-header px2 px-responsive">
  <div class="mt2 wrap">
    <div class="measure">
      <!--  <a href="http://www.springboottutorial.com" class="site-title">Spring Boot Tutorial</a>-->
      <a href="http://www.springboottutorial.com" ><span style="color:#4CCCDE">IN</span><span style="font-size:40px;color:#D5492E">28</span><span style="color:#36BF80">MINUTES</span></a>
      <nav class="site-nav">
        <a target="_blank" href="http://eepurl.com/bOJulL">Subscribe</a> <a target="_blank" href="http://eepurl.com/bOJulL">Courses</a> <a href="/spring-boot-tutorials-for-beginners">Videos</a>

<!--  

    

    
        <a href="/about/">About Us</a>
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    


    

    

    
        <a href="/contact/">Talk to Us</a>
    

    

    

    

    

    

    

    

    

    

    

    

    

    

-->
      </nav>
      <div class="clearfix"></div>
      
        <div class="social-icons">
  <div class="social-icons-right">
    
      <a class="fa fa-github" href="https://github.com/in28Minutes"></a>
    
    
    
    <a class="fa fa-rss" href="/feed.xml"></a>
    
      <a class="fa fa-twitter" href="https://twitter.com/in28Minutes"></a>
    
    
    
    
    
    
      <a class="fa fa-linkedin" href="https://www.linkedin.com/in/rangakaranam"></a>
    
    
    
  </div>
  <div class="right">
    
    
    
  </div>
</div>
<div class="clearfix"></div>

      
    </div>
  </div>
</header>


    <div class="post p2 p-responsive wrap" role="main">
      <div class="measure">
        


<div class="post-header mb2">
  <h1>Spring Boot Interview Questions</h1>
  <span class="post-meta">Dec 23, 2017</span><br>
  
  <span class="post-meta small">
  
    17 minute read
  
  </span>
</div>

<article class="post-content">
  <p>This guide will help you understand the most important concepts in Spring Boot in preparation for a Spring Boot Interview.</p>

<h2 id="10-step-reference-courses">10 Step Reference Courses</h2>

<ul>
  <li><a href="https://courses.in28minutes.com/p/spring-framework-for-beginners" target="_blank">Spring Framework for Beginners in 10 Steps</a></li>
  <li><a href="https://courses.in28minutes.com/p/spring-boot-for-beginners-in-10-steps" target="_blank">Spring Boot for Beginners in 10 Steps</a></li>
  <li><a href="https://www.youtube.com/watch?v=BjNhGaZDr0Y" target="_blank">Spring MVC in 10 Steps</a></li>
  <li><a href="https://courses.in28minutes.com/p/jpa-and-hibernate-tutorial-for-beginners-with-spring-boot" target="_blank">JPA and Hibernate in 10 Steps</a></li>
  <li><a href="https://courses.in28minutes.com/p/eclipse-tutorial-for-beginners" target="_blank">Eclipse Tutorial for Beginners in 5 Steps</a></li>
  <li><a href="https://courses.in28minutes.com/p/maven-tutorial-for-beginners-in-5-steps" target="_blank">Maven Tutorial for Beginners in 5 Steps</a></li>
  <li><a href="https://courses.in28minutes.com/p/junit-tutorial-for-beginners" target="_blank">JUnit Tutorial for Beginners in 5 Steps</a></li>
  <li><a href="https://courses.in28minutes.com/p/mockito-for-beginner-in-5-steps" target="_blank">Mockito Tutorial for Beginners in 5 Steps</a></li>
  <li><a href="https://courses.in28minutes.com/p/in28minutes-course-guide" target="_blank">Complete in28Minutes Course Guide</a></li>
</ul>

<h2 id="spring-boot">Spring Boot</h2>

<p>Spring Boot is the best Java framework for microservices. We recommend you to become an expert at Spring Boot!</p>

<h3 id="q--spring-boot-vs-spring-mvc-vs-spring---how-do-they-compare">Q : Spring Boot vs Spring MVC vs Spring - How do they compare?</h3>

<h5 id="spring-framework">Spring Framework</h5>
<blockquote>
  <p>Most important feature of Spring Framework is Dependency Injection. At the core of all Spring Modules is Dependency Injection or IOC Inversion of Control.</p>
</blockquote>

<p>When DI or IOC is used properly, we can develop loosely coupled applications. And loosely coupled applications can be easily unit tested.</p>

<h5 id="spring-mvc">Spring MVC</h5>

<blockquote>
  <p>Spring MVC Framework provides decoupled way of developing web applications. With simple concepts like Dispatcher Servlet, ModelAndView and View Resolver, it makes it easy to develop web applications.</p>
</blockquote>

<h5 id="spring-boot-1">Spring Boot</h5>

<p>The problem with Spring and Spring MVC is the amount of configuration that is needed.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
        &lt;property name="prefix"&gt;
            &lt;value&gt;/WEB-INF/views/&lt;/value&gt;
        &lt;/property&gt;
        &lt;property name="suffix"&gt;
            &lt;value&gt;.jsp&lt;/value&gt;
        &lt;/property&gt;
  &lt;/bean&gt;
  
  &lt;mvc:resources mapping="/webjars/**" location="/webjars/"/&gt;
</code></pre></div></div>

<p>Spring Boot solves this problem through a combination of  Auto Configuration and Starter Projects. Spring Boot also provide a few non functional features to make building production ready applications faster.</p>

<p>For complete answer with code examples refer - <a href="http://www.springboottutorial.com/spring-boot-vs-spring-mvc-vs-spring">Spring Boot vs Spring vs Spring MVC</a></p>

<h3 id="q--what-is-auto-configuration">Q : What is Auto Configuration?</h3>

<p>The problem with Spring and Spring MVC is the amount of configuration that is needed.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
        &lt;property name="prefix"&gt;
            &lt;value&gt;/WEB-INF/views/&lt;/value&gt;
        &lt;/property&gt;
        &lt;property name="suffix"&gt;
            &lt;value&gt;.jsp&lt;/value&gt;
        &lt;/property&gt;
  &lt;/bean&gt;
  
  &lt;mvc:resources mapping="/webjars/**" location="/webjars/"/&gt;
</code></pre></div></div>

<p>Can we bring more intelligence into this? When a spring mvc jar is added into an application, can we auto configure some beans automatically?</p>

<blockquote>
  <p>Spring Boot looks at a) Frameworks available on the CLASSPATH b) Existing configuration for the application. Based on these, Spring Boot provides basic configuration needed to configure the application with these frameworks. This is called Auto Configuration.</p>
</blockquote>

<p>For complete answer with code examples refer <a href="http://www.springboottutorial.com/spring-boot-auto-configuration">Auto Configuration</a>.</p>

<h3 id="q--what-are-spring-boot-starter-projects">Q : What are Spring Boot Starter Projects?</h3>

<blockquote>
  <p>Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop-shop for all the Spring and related technology that you need, without having to hunt through sample code and copy paste loads of dependency descriptors.</p>
</blockquote>

<p>For example, if you want to get started using Spring and JPA for database access, just include the spring-boot-starter-data-jpa dependency in your project, and you are good to go.</p>

<h3 id="q--can-you-explain-more-about-starters-with-an-example">Q : Can you explain more about Starters with an example?</h3>

<p>Let’s consider an example starter - Spring Boot Starter Web.</p>

<p>If you want to develop a web application or an application to expose restful services, Spring Boot Start Web is the starter to pick. Lets create a quick project with Spring Boot Starter Web using Spring Initializr.</p>

<p>Dependency for Spring Boot Starter Web</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>Following screenshot shows the different dependencies that are added in to our application</p>

<p><img src="/images/SpringBootStarterWeb-Dependencies.png" alt="Image" title="Spring Boot Starter Web - Dependencies" /></p>

<p>Dependencies can be classified into:</p>
<ul>
  <li>Spring - core, beans, context, aop</li>
  <li>Web MVC - (Spring MVC)</li>
  <li>Jackson - for JSON Binding</li>
  <li>Validation - Hibernate Validator, Validation API</li>
  <li>Embedded Servlet Container - Tomcat</li>
  <li>Logging - logback, slf4j</li>
</ul>

<p>Any typical web application would use all these dependencies. Spring Boot Starter Web comes pre packaged with these.</p>

<blockquote>
  <p>As a developer, I would not need to worry about either these dependencies or their compatible versions.</p>
</blockquote>

<h3 id="q--what-are-the-other-starter-project-options-that-spring-boot-provides">Q : What are the other Starter Project Options that Spring Boot provides?</h3>
<p>Spring Boot also provides other starter projects including the typical dependencies to develop specific type of applications</p>
<ul>
  <li>spring-boot-starter-web-services - SOAP Web Services</li>
  <li>spring-boot-starter-web - Web &amp; RESTful applications</li>
  <li>spring-boot-starter-test - Unit testing and Integration Testing</li>
  <li>spring-boot-starter-jdbc - Traditional JDBC</li>
  <li>spring-boot-starter-hateoas - Add HATEOAS features to your services</li>
  <li>spring-boot-starter-security - Authentication and Authorization using Spring Security</li>
  <li>spring-boot-starter-data-jpa - Spring Data JPA with Hibernate</li>
  <li>spring-boot-starter-data-rest - Expose Simple REST Services using Spring Data REST</li>
</ul>

<h3 id="q--how-does-spring-enable-creating-production-ready-applications-in-quick-time">Q : How does Spring enable creating production ready applications in quick time?</h3>

<p>Spring Boot aims to enable production ready applications in quick time. Spring Boot provides a few non functional features out of the box like caching, logging, monitoring and embedded servers.</p>
<ul>
  <li>spring-boot-starter-actuator - To use advanced features like monitoring &amp; tracing to your application out of the box</li>
  <li>spring-boot-starter-undertow, spring-boot-starter-jetty, spring-boot-starter-tomcat - To pick your specific choice of Embedded Servlet Container</li>
  <li>spring-boot-starter-logging - For Logging using logback</li>
  <li>spring-boot-starter-cache - Enabling Spring Framework’s caching support</li>
</ul>

<h3 id="what-is-the-minimum-baseline-java-version-for-spring-boot-2-and-spring-5">What is the minimum baseline Java Version for Spring Boot 2 and Spring 5?</h3>

<p>Spring Boot 2.0 requires Java 8 or later. Java 6 and 7 are no longer supported.</p>

<p>Recommended Reading</p>
<ul>
  <li>https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0.0-M1-Release-Notes</li>
</ul>

<h3 id="q--what-is-the-easiest-approach-to-create-a-spring-boot-project">Q : What is the easiest approach to create a Spring Boot Project?</h3>

<p>Spring Initializr <a href="http://start.spring.io/" target="_blank">http://start.spring.io/</a> is great tool to bootstrap your Spring Boot projects.</p>

<p><img src="/images/Spring-Initializr-Web.png" alt="Image" title="Web, Actuator and Developer Tools" /></p>

<p>As shown in the image above, following steps have to be done</p>

<ul>
  <li>Launch Spring Initializr and choose the following
    <ul>
      <li>Choose <code class="highlighter-rouge">com.in28minutes.springboot</code> as Group</li>
      <li>Choose <code class="highlighter-rouge">student-services</code> as Artifact</li>
      <li>Choose following dependencies
        <ul>
          <li>Web</li>
          <li>Actuator</li>
          <li>DevTools</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Click Generate Project.</li>
  <li>Import the project into Eclipse. File -&gt; Import -&gt; Existing Maven Project.</li>
</ul>

<h3 id="q---is-spring-initializr-the-only-way-to-create-spring-boot-projects">Q :  Is Spring Initializr the only way to create Spring Boot Projects?</h3>

<p>No.</p>

<p>Spring Initializr makes it easy to create Spring Boot Projects. But you can setup a maven project and add the right dependencies to start off.</p>

<p>In our Spring course, we use 2 approaches to create projects.</p>
<ul>
  <li>The first one is start.spring.io.</li>
  <li>The other one - setting up a project manually is used in the Section titled - “Basic Web Application”</li>
</ul>

<h6 id="setting-up-a-maven-project-manually">Setting up a maven project manually</h6>

<p>Here are the important steps:</p>
<ul>
  <li>In Eclipse, Use File -&gt; New Maven Project to create a new project.</li>
  <li>Add dependencies.</li>
  <li>Add the maven plugins!</li>
  <li>Add the Spring Boot Application class</li>
</ul>

<p>You are ready to go!</p>

<h3 id="q---why-do-we-need-spring-boot-maven-plugin">Q :  Why do we need spring-boot-maven-plugin?</h3>

<p>spring-boot-maven-plugin provides a few commands which enable you to package the code as a jar or run the application</p>
<ul>
  <li>spring-boot:run runs your Spring Boot application.</li>
  <li>spring-boot:repackage repackages your jar/war to be executable.</li>
  <li>spring-boot:start and spring-boot:stop to manage the lifecycle of your Spring Boot application (i.e. for integration tests).</li>
  <li>spring-boot:build-info generates build information that can be used by the Actuator.</li>
</ul>

<h3 id="q---how-can-i-enable-auto-reload-of-my-application-with-spring-boot">Q :  How can I enable auto reload of my application with Spring Boot?</h3>

<p>Use Spring Boot Developer Tools.</p>

<p>Adding Spring Boot Developer Tools to your project is very simple.</p>

<p>Add this dependency to your Spring Boot Project pom.xml</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>Restart the application.</p>

<p>You are all Set.</p>

<p>If you would want to auto load the page as well, you can look at LiveReload</p>
<ul>
  <li>http://www.logicbig.com/tutorials/spring-framework/spring-boot/boot-live-reload/.</li>
</ul>

<p>In my trials, we found LiveReload buggy. Do let us know if you have a better experience with it.</p>

<h3 id="q---what-and-why-embedded-servers">Q :  What and Why Embedded Servers?</h3>

<p>Think about what you would need to be able to deploy your application (typically) on a virtual machine.</p>
<ul>
  <li>Step 1 : Install Java</li>
  <li>Step 2 : Install the Web/Application Server (Tomcat/Websphere/Weblogic etc)</li>
  <li>Step 3 : Deploy the application war</li>
</ul>

<p>What if we want to simplify this?</p>

<p>How about making the server a part of the application?</p>

<blockquote>
  <p>You would just need a virtual machine with Java installed and you would be able to directly deploy the application on the virtual machine. Isn’t it cool?</p>
</blockquote>

<p>This idea is the genesis for Embedded Servers.</p>

<p>When we create an application deployable, we would embed the server (for example, tomcat) inside the deployable.</p>
<blockquote>
  <p>For example, for a Spring Boot Application, you can generate an application jar which contains Embedded Tomcat. You can run a web application as a normal Java application!</p>
</blockquote>

<p>Embedded server is when our deployable unit contains the binaries for the server (example, tomcat.jar).</p>

<h3 id="q---how-can-i-add-custom-js-code-with-spring-boot">Q :  How can I add custom JS code with Spring Boot?</h3>

<p>Create a folder called static under resources folder. You can put your static content in that folder.</p>

<p>For your example the path to myapp.js would be resources\static\js\myapp.js</p>

<p>You can refer to it in jsp using</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script src="/js/myapp.js"&gt;&lt;/script&gt;
</code></pre></div></div>

<h3 id="error---hal-browser-gives-me-unauthorized-error---full-authentication-is-required-to-access-this-resource-how-can-i-fix-it">Error :  HAL browser gives me unauthorized error - Full authentication is required to access this resource. How can I fix it?</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "timestamp": 1488656019562,
  "status": 401,
  "error": "Unauthorized",
  "message": "Full authentication is required to access this resource.",
  "path": "/beans"
}
</code></pre></div></div>

<p>Two options</p>

<h6 id="option-1--disable-security">Option 1 : Disable security</h6>

<p>application.properties</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>management.security.enabled: FALSE 
</code></pre></div></div>
<h6 id="option-2--search-for-password-in-the-log-and-pass-it-in-the-request-header">Option 2 : Search for password in the log and pass it in the request header</h6>

<h3 id="q--what-is-spring-data">Q : What is Spring Data?</h3>

<p>From http://projects.spring.io/spring-data/</p>

<blockquote>
  <p>Spring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store. It makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services.</p>
</blockquote>

<p>To make it simpler, Spring Data provides Abstractions (interfaces) you can use irrespective of underlying data source.</p>

<p>An example is shown below</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">TodoRepository</span> <span class="kd">extends</span> <span class="n">CrudRepository</span><span class="o">&lt;</span><span class="n">Todo</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</code></pre></div></div>

<p>You can define a simple repository and use it to insert, update, delete and retrieve todo entities from the database - without writing a lot of code.</p>

<h3 id="q--what-is-spring-data-rest">Q : What is Spring Data REST?</h3>

<p>Spring Data REST can be used to expose HATEOAS RESTful resources around Spring Data repositories.</p>

<p>An example using JPA is shown below</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RepositoryRestResource</span><span class="o">(</span><span class="n">collectionResourceRel</span> <span class="o">=</span> <span class="s">"todos"</span><span class="o">,</span> <span class="n">path</span> <span class="o">=</span> <span class="s">"todos"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TodoRepository</span>
        <span class="kd">extends</span> <span class="n">PagingAndSortingRepository</span><span class="o">&lt;</span><span class="n">Todo</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</code></pre></div></div>

<p>Without writing a lot of code, we can expose RESTful API around Spring Data Repositories.</p>

<p>A few example REST Services are shown below:</p>

<h4 id="post">POST</h4>
<ul>
  <li>URL : http://localhost:8080/todos</li>
  <li>Use Header : Content-Type:application/json</li>
  <li>Request Content</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "user": "Jill",
  "desc": "Learn Hibernate",
  "done": false
}
</code></pre></div></div>

<p>Response Content</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "user": "Jill",
  "desc": "Learn Hibernate",
  "done": false,
  "_links": {
    "self": {
      "href": "http://localhost:8080/todos/1"
    },
    "todo": {
      "href": "http://localhost:8080/todos/1"
    }
  }
}
</code></pre></div></div>

<p>The response contains the href of the newly created resource.</p>

<h3 id="q---how-does-pathusers-collectionresourcerelusers-work-with-spring-data-rest">Q :  How does path=”users”, collectionResourceRel=”users” work with Spring Data Rest?</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RepositoryRestResource(collectionResourceRel = "users", path = "users")

public interface UserRestRepository extends
PagingAndSortingRepository&lt;User, Long&gt;
</code></pre></div></div>

<ul>
  <li>path - The path segment under which this resource is to be exported.</li>
  <li>collectionResourceRel - The rel value to use when generating links to the collection resource. This is used when generating HATEOAS links.</li>
</ul>

<h3 id="q---what-happens-in-the-background-when-a-spring-boot-application-is-run-as-java-application">Q :  What happens in the background when a Spring Boot Application is “Run as Java Application”?</h3>

<p>If you are using Eclipse IDE, Eclipse maven plugin ensures that as soon as you add a dependency or make a change to the class file, it is compiled and ready in the target folder! And after that its just like any other Java application.</p>

<p>When you launch the java application, then the spring boot auto configuration magic kicks in.</p>
<ul>
  <li>It launches up tomcat when it sees that you are developing a web application!</li>
</ul>

<h3 id="q---can-we-use-jetty-instead-of-tomcat-in-spring-boot-starter-web">Q :  Can we use jetty instead of tomcat in spring-boot-starter-web?</h3>

<p>Remove the existing dependency on spring-boot-starter-web and add these in.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h3 id="q---how-to-generate-a-war-file-with-spring-boot">Q :  How to generate a WAR file with Spring Boot?</h3>

<p>Recommended Reading</p>
<ul>
  <li>https://spring.io/guides/gs/convert-jar-to-war/</li>
</ul>

<p>Here’s the direct link to spring documentation</p>
<ul>
  <li>https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging</li>
</ul>

<h3 id="q---how-to-deploy-to-a-different-server-with-with-spring-boot">Q :  How to deploy to a different server with with Spring Boot?</h3>

<p>You would need to do 2 Steps</p>
<ul>
  <li>Generate a war from the project.</li>
  <li>Deploy it to your favourite server (Websphere or Weblogic or Tomcat or …).</li>
</ul>

<p>Step 1 : This getting started guide should help - https://spring.io/guides/gs/convert-jar-to-war/</p>

<p>Step 2 : Depends on your server</p>

<h3 id="q---what-is-the-difference-between-requestmapping-and-getmapping">Q :  What is the difference between RequestMapping and GetMapping?</h3>
<ul>
  <li>RequestMapping is generic - you can use with GET, POST, PUT or any of the other request methods using the method attribute on the annotation.</li>
  <li>GetMapping is specific to GET request method. It’s just an extension of RequestMapping to improve clarity.</li>
</ul>

<h3 id="q---why-do-we-recommend-not-to-use-spring-data-rest-in-real-world-applications">Q :  Why do we recommend not to use Spring Data Rest in real world applications?</h3>

<p>We think Spring Data Rest is Good for quick prototyping! Be cautious about using this in Big applications!</p>

<p>With Spring Data REST you are exposing your database entitities directly as REST Services.</p>

<p>When you design RESTful services, Best design practices suggests that your interface should consider two important things</p>
<ul>
  <li>Your Domain Model</li>
  <li>Your Consumers</li>
</ul>

<p>With Spring Data REST, you are not considering either of those. You just expose entities as REST Services.</p>

<p>Thats why we suggest to use it for quick prototyping or the initial evolution of a project. It may not be a great idea for a fully evolved project.</p>

<h3 id="q---how-do-i-change-the-package-name-of-a-project-in-spring-initializer">Q :  How do I change the package name of a project in Spring Initializer?</h3>

<p>Good news is you can customise it. Click the link “Switch to the full version.“. You would be able to configure the package name you would want!</p>

<h3 id="q---where-can-i-find-the-complete-list-of-properties-that-can-be-configured-in-applicationproperties">Q :  Where can I find the complete list of properties that can be configured in application.properties?</h3>

<p>Here’s the complete guide</p>
<ul>
  <li>https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</li>
</ul>

<h3 id="q---what-is-the-difference-between-jpa-and-hibernate">Q :  What is the difference between JPA and Hibernate?</h3>

<p>Short Story</p>
<ul>
  <li>JPA is a specification/Interface</li>
  <li>Hibernate is one of JPA implementations</li>
</ul>

<p>When we use JPA, we use the annotation and interfaces from javax.persistence package, without using the hibernate import packages.</p>

<p>We recommend using JPA annotations as we are not tied to Hibernate as implementation. Later (I know - &lt;1% Chance), we can use another JPA implementation.</p>

<h3 id="q---in-which-layer-should-the-boundary-of-a-transaction-start">Q :  In which layer, should the boundary of a transaction start?</h3>

<p>We recommend managing transactions in the Service layer. Logic for business transactions is in the business/service layer and you would want to enforce transaction management at that level.</p>

<h3 id="q---what-are-the-dependencies-needed-to-start-up-a-jpa-application-connecting-to-in-memory-database-h2-with-spring-boot">Q :  What are the dependencies needed to start up a JPA Application connecting to in memory database H2 with Spring Boot?</h3>

<p>In a Spring Boot project, you should be able to launch up H2 Console as long as you ensure the following dependencies are on the class path.</p>
<ul>
  <li>web starter</li>
  <li>h2</li>
  <li>data jpa starter</li>
</ul>

<p>The exact dependencies are shown below:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;com.h2database&lt;/groupId&gt;
    &lt;artifactId&gt;h2&lt;/artifactId&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>A few tips:</p>
<ul>
  <li>An in-memory database is live only during the time of execution of the application. It is an efficient way to learn a framework.</li>
  <li>This is not how you want your real world applications to behave.</li>
  <li>We explain how to connect to a database of your choice in the answer to the question “How do we connect to a external database?”.</li>
</ul>

<h3 id="q---how-is-hibernate-chosen-as-the-default-implementation-for-jpa-without-any-configuration">Q :  How is Hibernate chosen as the default implementation for JPA without any configuration?</h3>

<p>Because of Spring Boot Auto Configuration.</p>

<p>This is the dependency we added in</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre></div></div>

<p>The Starter spring-boot-starter-data-jpa has a transitive dependency on Hibernate and JPA.</p>

<p>When Spring Boot sees Hibernate in the class path, it auto configures it as the default JPA Implementation.</p>

<h3 id="q---where-is-the-database-connection-info-specified-how-does-it-know-to-automatically-connect-to-h2">Q :  Where is the database connection info specified? How does it know to automatically connect to H2?</h3>

<p>Thats Spring Boot Autoconfiguration magic.</p>

<p>From https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html</p>

<blockquote>
  <p>Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added. For example, If HSQLDBis on your classpath, and you have not manually configured any database connection beans, then we will auto-configure an in-memory database</p>
</blockquote>

<p>More Reading</p>
<ul>
  <li>http://www.springboottutorial.com/spring-boot-auto-configuration</li>
</ul>

<h3 id="q---how-do-we-connect-to-a-external-database-like-mssql-or-oracle">Q :  How do we connect to a external database like MSSQL or oracle?</h3>

<p>Let’s consider one of those as an example - MySQL</p>

<h6 id="step-1---add-dependency-for-mqsql-connector-to-pomxml">Step 1 - Add dependency for mqsql connector to pom.xml</h6>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h6 id="step-2---remove-h2-dependency-from-pomxml">Step 2 - Remove H2 Dependency from pom.xml</h6>
<p>Or atleast make its scope as test</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!--
&lt;dependency&gt;
    &lt;groupId&gt;com.h2database&lt;/groupId&gt;
    &lt;artifactId&gt;h2&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
--&gt;
</code></pre></div></div>

<h6 id="step-3---setup-your-my-sql-database">Step 3 - Setup your My SQL Database</h6>
<ul>
  <li>For more check out - https://github.com/in28minutes/jpa-with-hibernate#installing-and-setting-up-mysql</li>
</ul>

<h6 id="step-4---configure-your-connection-to-my-sql-database">Step 4 - Configure your connection to My SQL Database</h6>
<p>Configure application.properties</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:mysql://localhost:3306/todo_example
spring.datasource.username=todouser
spring.datasource.password=YOUR_PASSWORD
</code></pre></div></div>

<h6 id="step-5---restart-and-you-are-ready">Step 5 - Restart and You are ready!</h6>
<p>That’s it</p>

<h3 id="q---what-is-the-default-h2-database-name-configured-by-spring-boot-why-is-the-default-database-name-testdb">Q :  What is the default h2 database name configured by Spring Boot? Why is the default database name testdb?</h3>

<p>This is where all the default values in application.properties are listed</p>
<ul>
  <li>https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</li>
</ul>

<p>Look for the property below</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.datasource.name=testdb # Name of the datasource.
</code></pre></div></div>

<p>If you are using an H2 in-memory database, thats exactly the name that Spring Boot uses to setup your H2 database.</p>

<h3 id="q---what-happens-if-h2-is-not-in-the-classpath">Q :  What happens if H2 is not in the classpath?</h3>

<p>You get this error</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cannot determine embedded database driver class for database type NONE
</code></pre></div></div>

<p>Add H2 to the pom.xml and Restart your server</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.h2database&lt;/groupId&gt;
    &lt;artifactId&gt;h2&lt;/artifactId&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h3 id="q---can-you-give-an-example-for-readonly-as-true-in-transaction-management">Q :  Can you give an example for ReadOnly as true in Transaction management?</h3>
<ul>
  <li>When you read stuff from the database, user details or any other details, you wanna set read only on the transaction so that Hibernate does not need to check for changes to the entities. This is more efficient.</li>
</ul>

<h3 id="q--what-is-best-way-to-expose-custom-application-configuration-with-spring-boot">Q : What is best way to expose custom application configuration with Spring Boot?</h3>

<p>The problem with @Value is that you would have your configuration values distributed through out your application. A better option would be to have a centralized approach.</p>

<p>You can define a configuration component using <code class="highlighter-rouge">@ConfigurationProperties</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Component
@ConfigurationProperties("basic")
public class BasicConfiguration {
    private boolean value;
    private String message;
    private int number;

</code></pre></div></div>

<p>The values can be configured in application.properties</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basic.value: true
basic.message: Dynamic Message
basic.number: 100
</code></pre></div></div>
<h3 id="q--what-is-the-need-for-profiles">Q : What is the need for Profiles?</h3>

<p>Enterprise application development is complex. You have multiple environments</p>
<ul>
  <li>Dev</li>
  <li>QA</li>
  <li>Stage</li>
  <li>Production</li>
</ul>

<p>You want to have different application configuration in each of the environments.</p>

<blockquote>
  <p>Profiles help to have different application configuration for different environments.</p>
</blockquote>

<p>Spring and Spring Boot provide features where you can specify</p>
<ul>
  <li>What is the configuration for various environments in different profiles?</li>
  <li>Set the active profile for a specific environment.</li>
</ul>

<p>Spring Boot would pick up the application configuration based on the active profile that is set in a specific environment.</p>

<h3 id="q--how-can-you-use-profiles-to-configure-environment-specific-configuration-with-spring-boot">Q : How can you use profiles to configure environment specific configuration with Spring Boot?</h3>

<p>Profile is nothing but a key to identify an environment.</p>

<p>In this example, we will use two profiles</p>
<ul>
  <li>dev</li>
  <li>prod</li>
</ul>

<p>The default application configuration is present in application.properties. Let’s consider an example.</p>

<p>application.properties</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basic.value= true
basic.message= Dynamic Message
basic.number= 100
</code></pre></div></div>

<p>We would want to customize the application.properties for dev profile. We would need to create a file with name application-dev.properties and override the properties that we would want to customize.</p>

<p>application-dev.properties</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basic.message: Dynamic Message in DEV
</code></pre></div></div>

<p>Similarly you can configure properties for prod profile.</p>

<p>application-prod.properties</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basic.message: Dynamic Message in Prod
</code></pre></div></div>

<p>Once you have profile specific configuration, you would need to set the active profile in an environment.</p>

<p>There are multiple ways of doing this</p>
<ul>
  <li>Using -Dspring.profiles.active=prod in VM Arguments</li>
  <li>Use <code class="highlighter-rouge">spring.profiles.active=prod</code> in application.properties</li>
</ul>

</article>




  
<blockquote>
  <p><a href="http://eepurl.com/bOJulL">Subscribe</a> to get amazing offers on all our courses.</p>
</blockquote>

<blockquote>
  <p>Find out how in28Minutes reached 100,000 Learners on Udemy in 2 years. <a href="http://www.in28minutes.com/the-in28minutes-way">The in28minutes Way</a> - Our approach to creating awesome learning experiences.
</p>
</blockquote>




  <div id="disqus_thread"></div>
  <script type="text/javascript">
    var disqus_shortname  = 'spring-boot-tutorial';
    var disqus_identifier = '/spring-boot-interview-questions';
    var disqus_title      = "Spring Boot Interview Questions";

    (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>





  <h3 class="related-post-title">Related Posts</h3>
  
    <div class="post ml2">
      <a href="/spring-boot-tutorials-for-beginners" class="post-link">
        <h4 class="post-title">Spring Boot Tutorials for Beginners</h4>
        <p class="post-summary">At in28Minutes, we are creating a number of tutorials with videos, articles &amp; courses on Spring Boot for Beginners and Experienced Developers. This resources will help you learn and gain expertise at Spring Boot.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/spring-boot-projects-with-code-examples" class="post-link">
        <h4 class="post-title">20+ Spring Boot Projects with Code Examples</h4>
        <p class="post-summary">At in28Minutes, we have created more than 20 projects with code examples on Github. We have 50+ articles explaining these projects. These code examples will you learn and gain expertise at Spring Boot.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/microservices-with-spring-boot-part-5-eureka-naming-server" class="post-link">
        <h4 class="post-title">Microservices with Spring Boot - Part 5 - Using Eureka Naming Server</h4>
        <p class="post-summary">Let's learn the basics of microservices and microservices architectures. We will also start looking at a basic implementation of a microservice with Spring Boot. We will create a couple of microservices and get them to talk to each other using Eureka Naming Server and Ribbon for Client Side Load Balancing. In part 5 of this series, we will focus on enabling Eureka Naming Server and have the microservices communicate with it.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/microservices-with-spring-boot-part-4-ribbon-for-load-balancing" class="post-link">
        <h4 class="post-title">Microservices with Spring Boot - Part 4 - Using Ribbon for Load Balancing</h4>
        <p class="post-summary">Let's learn the basics of microservices and microservices architectures. We will also start looking at a basic implementation of a microservice with Spring Boot. We will create a couple of microservices and get them to talk to each other using Eureka Naming Server and Ribbon for Client Side Load Balancing. In part 4 of this series, we will focus on using Ribbon to do Load Balancing.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/creating-microservices-with-spring-boot-part-3-currency-conversion-microservice" class="post-link">
        <h4 class="post-title">Microservices with Spring Boot - Part 3 - Creating Currency Conversion Microservice</h4>
        <p class="post-summary">Let's learn the basics of microservices and microservices architectures. We will also start looking at a basic implementation of a microservice with Spring Boot. We will create a couple of microservices and get them to talk to each other using Eureka Naming Server and Ribbon for Client Side Load Balancing. In part 3 of this series, we will focus on Creating Currency Conversion Microservice.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/creating-microservices-with-spring-boot-part-2-forex-microservice" class="post-link">
        <h4 class="post-title">Microservices with Spring Boot - Part 2 - Creating Forex Microservice</h4>
        <p class="post-summary">Let's learn the basics of microservices and microservices architectures. We will also start looking at a basic implementation of a microservice with Spring Boot. We will create a couple of microservices and get them to talk to each other using Eureka Naming Server and Ribbon for Client Side Load Balancing. In part 2 of this series, we will focus on Creating Forex Microservice.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/creating-microservices-with-spring-boot-part-1-getting-started" class="post-link">
        <h4 class="post-title">Microservices with Spring Boot - Part 1 - Getting Started</h4>
        <p class="post-summary">Let's learn the basics of microservices and microservices architectures. We will also start looking at a basic implementation of a microservice with Spring Boot. We will create a couple of microservices and get them to talk to each other using Eureka Naming Server and Ribbon for Client Side Load Balancing. In part 1 of this series, lets get introduced to the concept of microservices and understand how to create great microservices with Spring Boot and Spring Cloud.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/introduction-to-spring-boot-for-beginners" class="post-link">
        <h4 class="post-title">Getting Started with Spring Boot - 7 things a beginner should know!</h4>
        <p class="post-summary">Spring Boot is a tricky framework to understand. In this tutorial for beginnners with Spring Boot, we will look at the basics of Spring Boot and help you understand the important concepts - Architecture, Starter Projects, Auto Configuration and Starter Parent. We will look at the architecture of Spring Boot and explore a variety of resources - tutorials, courses and videos - we created to help you get started with Spring Boot effectively.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/spring-boot-rest-api-projects-with-code-examples" class="post-link">
        <h4 class="post-title">Spring Boot REST API Projects with Code Examples</h4>
        <p class="post-summary">At in28Minutes, we have created 8 Spring Boot REST API projects with code examples on Github. We have 10+ tutorial articles explaining these projects.  These code examples will help beginners and experts to learn and gain expertise at developing RESTful Services with Spring Boot.</p>
      </a>
    </div>
  
    <div class="post ml2">
      <a href="/creating-soap-web-service-with-spring-boot-web-services-starter" class="post-link">
        <h4 class="post-title">Creating a SOAP Web Service with Spring Boot Starter Web Services</h4>
        <p class="post-summary">Let's learn how to create a SOAP Web Service with Spring Boot Starter Web Services. We will take a Contract First approach by definining an XSD and exposing a WSDL from it.</p>
      </a>
    </div>
  


      </div>
    </div>
  </div>

  <footer class="center">
  <div class="measure">
    <small>
     You can check out our courses at <a href="http://www.in28minutes.com">in28minutes.com</a>. 
    </small>
  </div>
</footer>



<script src="//my.hellobar.com/fa8e0fc9996032d4bfd478f4fda009126f1d4b72.js" type="text/javascript" charset="utf-8" async="async"></script> 

<!--
<script>
  (function (w,i,d,g,e,t,s) {w[d] = w[d]||[];t= i.createElement(g);
    t.async=1;t.src=e;s=i.getElementsByTagName(g)[0];s.parentNode.insertBefore(t, s);
  })(window, document, '_gscq','script','//widgets.getsitecontrol.com/116528/script.js');
</script>
-->




</body>
</html>
